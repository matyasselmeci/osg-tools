#!/usr/bin/python
import iCalLib
from optparse import OptionParser
import os
import re
import tempfile
import subprocess
import datetime

import pwd
import smtplib
import socket
# The email.* imports got renamed between Python versions so I have to deal with that.
try:
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
except ImportError:
    from email.MIMEText import MIMEText
    from email.MIMEMultipart import MIMEMultipart

def mailTextMessage(subject, text, recipients):
    """Mail a plain text message to 'recipients'. 'recipients' is a list of
    addresses to send email to. 'subject' and 'text' are strings containing
    the subject line, and body text, resp."""
    message = MIMEText(text)
    # Create a 'From' address using data in the password file and the local
    # machine's hostname.
    pwdentry = pwd.getpwuid(os.getuid())
    from_addr = "%s <%s@%s>" % (pwdentry.pw_gecos, # User's real name
                                pwdentry.pw_name,  # User's login
                                socket.getfqdn())  # Hostname
    message['Subject'] = subject
    message['From'] = from_addr
    message['To'] = ', '.join(recipients)
    smtp = smtplib.SMTP('localhost')
    smtp.sendmail(from_addr,
                  recipients,
                  message.as_string())
    smtp.quit()


# email script by Nick Pasternack to help VDT (4/20/12)

def parseArgs():
    """Parses arguments, use -h for details"""
    usage = "usage: %prog [options] argument"
    parser = OptionParser(usage=usage)

    parser.add_option("-u","--url", metavar="url", action="store", type="string", \
                        dest="url", help="url to download")
    parser.add_option("-e", "--email", metavar="To", action="store", type="string", \
                    dest="To", help="email address to send to")
    parser.add_option( "-d", "--debug", \
                      action="store_false", metavar="ShouldEM", dest="ShouldEM", default=True, \
                      help="don't send email")

    (options, args) = parser.parse_args()

    url = options.url
    To = options.To 
    ShouldEM = options.ShouldEM 

    if To is None and ShouldEM:
        parser.error("To is required if not in debug mode\n")
    if url is None:
        parser.error("url is required\n")
    if len(args) != 0:
        parser.error("incorrect number of arguments\n")

    return (url,To,ShouldEM)


def getTriageDuty(url, date):
    """Finds out who is on Triage Duty"""
    on_triage = []
    C = iCalLib.Cal()
    C.download(url)
    for CE in C.events_on_date(date):
        triage_match = re.search(r'Triage:\s*(.*)', CE.summary)
        if triage_match:
            on_triage.append(triage_match.group(1))
    return on_triage

def buildMessage(url):
    today = datetime.date.today()
    triage_today = (', '.join(getTriageDuty(url, today)) or 'Triage Duty Unknown')
    triage_next_week = (', '.join(getTriageDuty(url, today + datetime.timedelta(weeks=1))) or 'Triage Duty Unknown')

    subject = "This week's OSG Software Triage Duty: " + triage_today
    body = """\
OSG Triage Duty
This week: %s
Next week: %s

More information at:
https://opensciencegrid.org/technology/policy/software-support/
""" % (triage_today, triage_next_week)
    
    return (subject, body)
    

(url,To,ShouldEM) = parseArgs()
subject, body = buildMessage(url)
if ShouldEM:
    mailTextMessage(subject, body, [To])

