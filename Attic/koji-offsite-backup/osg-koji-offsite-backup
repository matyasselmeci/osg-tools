#!/usr/bin/env python
from __future__ import print_function

# Requires Python 2.6+

DRYRUN = False

REMOTE_LOGIN = "osgcollab"
REMOTE_HOST = "hcc-osg-kojidb.unl.edu"
REMOTE_BASE_PATH = "/data/koji"
LOCAL_BACKUP_ROOT = "/export/backup"
KOJISUBDIR = "koji.chtc.wisc.edu"
DBSUBDIR = "db-01.batlab.org"
LOGDIR = "/var/log/osg-koji-offsite-backup"
RETRIES = 10
RETRY_WAIT = 60
TIMEOUT = 60 * 60 * 18  # 18 hours
NOTIFY_EMAILS = [
    x + "@cs.wisc.edu" for x in ["blin", "cat", "matyas+cron", "tim"]
]
KEY = "/root/osg_backup_key"

REMOTE_LOGIN_HOST = "%s@%s" % (REMOTE_LOGIN, REMOTE_HOST)

MAIL_DELIVERY_METHOD = "sendmail"  # either 'sendmail' or 'smtp'

import errno
import os
import re
import shutil
import signal
from subprocess import Popen, PIPE, STDOUT
import socket
import sys
import tempfile
import time

from email.mime.text import MIMEText

try:
    from pipes import quote as shell_quote
except ImportError:
    from shlex import quote as shell_quote


class Error(Exception):
    pass


class CommandError(Error):
    def __init__(self, command, returncode, outerr):
        Error.__init__(
            self,
            "Command %r failed with returncode %d, output:\n%s"
            % (command, returncode, outerr),
        )
        self.command = command
        self.returncode = returncode
        self.outerr = outerr


class AlarmException(Exception):
    pass


def alarm_handler(signum, frame):
    raise AlarmException()


def compose_message(subject, text, recipients):
    if not isinstance(recipients, str):
        recipients = ", ".join(recipients)

    message = MIMEText(text)
    message["Subject"] = subject
    message["From"] = "Offsite backup script <%s@%s>" % (
        os.getlogin(),
        socket.getfqdn(),
    )
    message["To"] = recipients

    return message


def send_message_smtp(message):
    import smtplib

    try:
        smtp = smtplib.SMTP("localhost")
        smtp.sendmail(message["From"], message["To"].split(", "), message.as_string())
        smtp.quit()
        return
    except smtplib.SMTPException as e:
        return str(e)


def send_message_sendmail(message):
    try:
        proc = Popen(
            ["/usr/sbin/sendmail", "-oi", "-t"], stdin=PIPE, stdout=PIPE, stderr=STDOUT
        )
        outerr = proc.communicate(message.as_string())[0]
        ret = proc.returncode
        if ret != 0:
            return "exit %d from sendmail\noutput:\n%s" % (ret, outerr)
        return
    except OSError as e:
        return str(e)


def send_message(message):
    fail_reason = None
    if MAIL_DELIVERY_METHOD == "smtp":
        fail_reason = send_message_smtp(message)
    elif MAIL_DELIVERY_METHOD == "sendmail":
        fail_reason = send_message_sendmail(message)
    else:
        fail_reason = "Invalid MAIL_DELIVERY_METHOD %s" % MAIL_DELIVERY_METHOD

    if fail_reason is not None:
        print("Unable to send email message: %s" % fail_reason)
        print("Message text:\n%s" % message)


def notify_email(subject, text):
    send_message(compose_message(subject, text, NOTIFY_EMAILS))


def sbacktick(*args, **kwargs):
    # simplified version of utils.sbacktick from osgbuild
    sp_kwargs = kwargs.copy()
    sp_kwargs["stdout"] = PIPE
    sp_kwargs["stderr"] = STDOUT

    if DRYRUN:
        print(str(args))
        return 0, ""

    proc = Popen(*args, **sp_kwargs)
    outerr = proc.communicate()[0]

    return proc.returncode, outerr


def csbacktick(*args, **kwargs):
    # checked version of sbacktick
    ret, outerr = sbacktick(*args, **kwargs)
    if ret != 0:
        raise CommandError(command=args[0], returncode=ret, outerr=outerr)
    return outerr


def rsync_with_retry(src_path, remote_path, delete=None, logfile=None):
    rsync_opts = ["--archive", "--stats", "--rsh=ssh -i %s" % KEY]
    if logfile:
        rsync_opts.append("--log-file=%s" % logfile)

    if delete:
        rsync_opts.append("--%s" % delete)

    dest_path = "%s:%s" % (REMOTE_LOGIN_HOST, remote_path)
    count = 0
    text = ""
    while True:
        try:
            if count > 0:
                text += "Retry %d\n" % count
            text += "-" * 60
            text += csbacktick(["rsync"] + rsync_opts + [src_path + "/", dest_path])
            text += "." * 60 + "\n"
            return text
        except CommandError:
            text += "\n\n"
            if count >= RETRIES:
                raise
            count += 1
            time.sleep(RETRY_WAIT)


def backup_configs_roothome_and_database(workdir, remote_path):
    for tarball, directory in [
        ("etc.tar.gz", os.path.join(KOJISUBDIR, "rootfs/etc")),
        ("roothome.tar.gz", os.path.join(KOJISUBDIR, "rootfs/root")),
        ("pgsql.tar.gz", os.path.join(DBSUBDIR, "rootfs/var/lib/pgsql")),
        ("pgsql-backup.tar.gz", os.path.join(DBSUBDIR, "rootfs/var/lib/pgsql-backup")),
    ]:

        csbacktick(
            "tar -cp %s | gzip -n > %s"
            % (shell_quote(directory), shell_quote(os.path.join(workdir, tarball))),
            shell=True,
        )
    return "Backing up configs, root home, and database\n" + rsync_with_retry(
        workdir,
        os.path.join(remote_path, "configs_roothome_and_database"),
        delete=None,
        logfile=os.path.join(LOGDIR, "rsync-backup-config-and-db.log"),
    )


def backup_packages(remote_path, delete):
    packages_dir = os.path.join(KOJISUBDIR, "kojifs/packages")
    if not os.path.isdir(packages_dir):
        raise Error(packages_dir + " is not a directory")

    return "Backing up packages\n" + rsync_with_retry(
        packages_dir,
        os.path.join(remote_path, "packages"),
        delete=delete,
        logfile=os.path.join(LOGDIR, "rsync-backup-packages.log"),
    )


def get_current_backup_date():
    """Return the most recent completed backup date"""

    dir_pat = re.compile(r"20[0-9][0-9]-[0-1][0-9]-[0-3][0-9]$")

    def is_backup_dir(dirent):
        return dir_pat.match(dirent) and os.path.isdir(
            os.path.join(LOCAL_BACKUP_ROOT, dirent)
        )

    backup_dates = sorted(filter(is_backup_dir, os.listdir(LOCAL_BACKUP_ROOT)))

    # Look for rsync processes owned by root. These are likely to be processes
    # doing the original backups. False positives aren't a big deal.
    ret, _ = sbacktick(["pgrep", "-x", "-u", "root", "rsync"])
    try:
        if ret == 0:
            # rsync still running; most recent is assumed to be incomplete
            return backup_dates[-2]
        else:
            # no rsync; most recent is assumed to be complete
            return backup_dates[-1]
    except IndexError:
        raise Error("No complete backups found")


def main():
    config_backup_time = None
    package_backup_time = None
    try:
        details = ""

        backup_date = get_current_backup_date()

        tempdir = tempfile.mkdtemp(prefix="osg-koji-backup-")
        try:
            workdir = os.path.join(tempdir, backup_date)
            local_backup_path = os.path.join(LOCAL_BACKUP_ROOT, backup_date)
            remote_path = os.path.join(REMOTE_BASE_PATH, "backups")

            os.makedirs(workdir)

            olddir = os.getcwd()
            os.chdir(local_backup_path)

            signal.signal(signal.SIGALRM, alarm_handler)
            signal.alarm(TIMEOUT)

            try:
                os.makedirs(LOGDIR)
            except EnvironmentError as e:
                if e.errno != errno.EEXIST:
                    raise

            start_time = time.time()
            details += backup_configs_roothome_and_database(workdir, remote_path)
            config_backup_time = time.time() - start_time

            start_time = time.time()
            details += "\n" + backup_packages(remote_path, delete="delete-after")
            package_backup_time = time.time() - start_time

            os.chdir(olddir)

        finally:
            signal.alarm(0)
            shutil.rmtree(tempdir)

    except AlarmException:
        message = "OSG Koji offsite backups timed out after %f seconds\n" % TIMEOUT
        if config_backup_time is None:
            message += "Config/roothome/db backups didn't finish\n"
        else:
            message += (
                "Config/roothome/db backups took %f seconds\n" % config_backup_time
            )
        if package_backup_time is None:
            message += "Package backups didn't finish\n"
        else:
            message += "Package backups took %f seconds\n" % package_backup_time
        message += "\n" + details
        message += "See logs in %s\n" % LOGDIR

        notify_email("OSG Koji offsite timed out", message)
        return 124

    except KeyboardInterrupt:
        print("Interrupted.")
        return 3

    except Error as e:
        notify_email(
            "OSG Koji offsite backups failed", "%s\nSee logs in %s\n" % (e, LOGDIR)
        )
        return str(e)

    except Exception as e:
        notify_email(
            "OSG Koji offsite backups died", "%s\nSee logs in %s\n" % (e, LOGDIR)
        )
        raise

    else:
        message = "OSG Koji offsite backups to %s succeeded\n" % remote_path
        message += "Config/roothome/db backups took %f seconds\n" % config_backup_time
        message += "Package/roothome/db backups took %f seconds\n" % package_backup_time
        message += "\n" + details

        notify_email("OSG Koji offsite backups completed", message)
        return 0


if __name__ == "__main__":
    sys.exit(main())
